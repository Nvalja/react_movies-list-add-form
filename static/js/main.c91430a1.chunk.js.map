{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","isValidUrl","inputValue","test","NewMovie","state","values","errors","handleChanges","event","target","name","value","setState","prevState","handleSubmit","preventDefault","props","addMovie","this","isFormWithErrors","Object","some","item","action","method","onSubmit","type","placeholder","classNames","onChange","disabled","Component","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c91430a1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './NewMovie.scss';\n\nfunction isValidUrl(inputValue) {\n  // eslint-disable-next-line max-len\n  return /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/.test(inputValue);\n}\n\nexport class NewMovie extends Component {\n  state = {\n    values: {\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    },\n    errors: {\n      title: false,\n      imgUrl: false,\n      imdbUrl: false,\n      imdbId: false,\n    },\n  };\n\n  handleChanges = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'imgUrl' || name === 'imdbUrl') {\n      this.setState(prevState => ({\n        values: {\n          ...prevState.values,\n          [name]: value,\n        },\n        errors: {\n          ...prevState.errors,\n          [name]: !isValidUrl(value),\n        },\n      }));\n\n      return;\n    }\n\n    this.setState(prevState => ({\n      values: {\n        ...prevState.values,\n        [name]: value,\n      },\n      errors: {\n        ...prevState.errors,\n        [name]: false,\n      },\n    }));\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const {\n      title,\n      description,\n      imdbId,\n      imdbUrl,\n      imgUrl,\n    } = this.state.values;\n\n    if (!title || !imdbId || !imdbUrl || !imgUrl) {\n      this.setState(prevState => ({\n        errors: {\n          ...prevState.errors,\n          title: !prevState.values.title,\n          imdbId: !prevState.values.imdbId,\n          imgUrl: !isValidUrl(imgUrl),\n          imdbUrl: !isValidUrl(imdbUrl),\n        },\n      }));\n\n      return;\n    }\n\n    if (!isValidUrl(imdbUrl) || !isValidUrl(imgUrl)) {\n      return;\n    }\n\n    this.props.addMovie({\n      title,\n      description,\n      imdbId,\n      imdbUrl,\n      imgUrl,\n    });\n\n    this.setState({\n      values: {\n        title: '',\n        description: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n      },\n      errors: {\n        title: false,\n        imgUrl: false,\n        imdbUrl: false,\n        imdbId: false,\n      },\n    });\n  }\n\n  render() {\n    const { values, errors } = this.state;\n    const isFormWithErrors = Object.values(errors)\n      .some(item => item === true);\n\n    return (\n      <form\n        action=\"\"\n        method=\"POST\"\n        className=\"form\"\n        onSubmit={this.handleSubmit}\n      >\n        {errors.title && (\n          <span className=\"form__message\">\n            You have to write title\n          </span>\n        )}\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"enter the title of movie*\"\n          className={classNames(\n            'form__input',\n            { 'form__input--error': errors.title },\n          )}\n          value={values.title}\n          onChange={this.handleChanges}\n        />\n\n        <textarea\n          name=\"description\"\n          placeholder=\"description for movie\"\n          className=\"form__input\"\n          value={values.description}\n          onChange={this.handleChanges}\n        />\n\n        {errors.imgUrl && (\n          <span className=\"form__message\">\n            you have to write imgUrl\n          </span>\n        )}\n        <input\n          type=\"text\"\n          name=\"imgUrl\"\n          placeholder=\"enter url to movie image*\"\n          className={classNames(\n            'form__input',\n            { 'form__input--error': errors.imgUrl },\n          )}\n          value={values.imgUrl}\n          onChange={this.handleChanges}\n        />\n\n        {errors.imdbUrl && (\n          <span className=\"form__message\">\n            you have to write imdbUrl address\n          </span>\n        )}\n        <input\n          type=\"text\"\n          name=\"imdbUrl\"\n          placeholder=\"enter url to IMDb image*\"\n          className={classNames(\n            'form__input',\n            { 'form__input--error': errors.imdbUrl },\n          )}\n          value={values.imdbUrl}\n          onChange={this.handleChanges}\n        />\n\n        {errors.imdbId && (\n          <span className=\"form__message\">\n            you have to write imdb-Id\n          </span>\n        )}\n        <input\n          type=\"text\"\n          name=\"imdbId\"\n          placeholder=\"enter IMDb ID*\"\n          className={classNames(\n            'form__input',\n            { 'form__input--error': errors.imdbId },\n          )}\n          value={values.imdbId}\n          onChange={this.handleChanges}\n        />\n\n        <button\n          type=\"submit\"\n          className=\"form__button\"\n          disabled={isFormWithErrors}\n        >\n          ⩥ Add ⩤\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(prevState => ({\n      movies: [...prevState.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}