{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","validUrl","inputValue","test","NewMovie","state","values","errors","submit","getChanges","event","target","name","value","setState","getSubmit","preventDefault","props","getMovie","this","infoAboutErrors","Object","some","item","action","method","onSubmit","type","placeholder","classNames","onChange","disabled","Component","App","moviesFromServer","addMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0db499d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './NewMovie.scss';\n\nfunction validUrl(inputValue) {\n  // eslint-disable-next-line max-len\n  return /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/.test(inputValue);\n}\n\nexport class NewMovie extends Component {\n  state = {\n    values: {\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n\n    },\n    errors: {\n      title: false,\n      imgUrl: false,\n      imdbUrl: false,\n      imdbId: false,\n    },\n\n    submit: false,\n  };\n\n  getChanges = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'imgUrl' || name === 'imdbUrl') {\n      this.setState(state => ({\n        values: {\n          ...state.values,\n          [name]: value,\n        },\n        errors: {\n          ...state.errors,\n          [name]: !validUrl(value),\n        },\n      }));\n\n      return;\n    }\n\n    this.setState(state => ({\n      values: {\n        ...state.values,\n        [name]: value,\n      },\n      errors: {\n        ...state.errors,\n        [name]: false,\n      },\n    }));\n  }\n\n  getSubmit = (event) => {\n    event.preventDefault();\n    const {\n      title,\n      description,\n      imdbId,\n      imdbUrl,\n      imgUrl,\n    } = this.state.values;\n\n    this.setState({\n      submit: true,\n    });\n\n    if (!title || !imdbId || !imdbUrl || !imgUrl) {\n      this.setState(state => ({\n        errors: {\n          ...state.errors,\n          title: !state.values.title,\n          imdbId: !state.values.imdbId,\n          imgUrl: !validUrl(imgUrl),\n          imdbUrl: !validUrl(imdbUrl),\n        },\n      }));\n\n      return;\n    }\n\n    if (!validUrl(imdbUrl) || !validUrl(imgUrl)) {\n      return;\n    }\n\n    this.props.getMovie({\n      title,\n      description,\n      imdbId,\n      imdbUrl,\n      imgUrl,\n    });\n\n    this.setState({\n      values: {\n        title: '',\n        description: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n      },\n      errors: {\n        title: false,\n        imgUrl: false,\n        imdbUrl: false,\n        imdbId: false,\n      },\n    });\n  }\n\n  render() {\n    const { values, errors, submit } = this.state;\n    let infoAboutErrors = Object.values(errors);\n\n    infoAboutErrors = infoAboutErrors.some(item => item === true);\n\n    return (\n      <form\n        action=\"\"\n        method=\"POST\"\n        className=\"form\"\n        onSubmit={this.getSubmit}\n      >\n        {errors.title && (\n          <span className=\"form__message\">\n            You have to write title\n          </span>\n        )}\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"enter the title of movie*\"\n          className={classNames(\n            'form__input',\n            { 'form__input--error': errors.title },\n          )}\n          value={values.title}\n          onChange={this.getChanges}\n        />\n\n        <textarea\n          name=\"description\"\n          placeholder=\"description for movie\"\n          className=\"form__input\"\n          value={values.description}\n          onChange={this.getChanges}\n        />\n\n        {errors.imgUrl && (\n          <span className=\"form__message\">\n            you have to write picture address\n          </span>\n        )}\n        <input\n          type=\"text\"\n          name=\"imgUrl\"\n          placeholder=\"enter url to movie image*\"\n          className={classNames(\n            'form__input',\n            { 'form__input--error': errors.imgUrl && submit },\n          )}\n          value={values.imgUrl}\n          onChange={this.getChanges}\n        />\n\n        {errors.imdbUrl && (\n          <span className=\"form__message\">\n            you have to write picture address\n          </span>\n        )}\n        <input\n          type=\"text\"\n          name=\"imdbUrl\"\n          placeholder=\"enter url to IMDb image*\"\n          className={classNames(\n            'form__input',\n            { 'form__input--error': errors.imdbUrl && submit },\n          )}\n          value={values.imdbUrl}\n          onChange={this.getChanges}\n        />\n\n        {errors.imdbId && (\n          <span className=\"form__message\">\n            you have to write imdb-Id\n          </span>\n        )}\n        <input\n          type=\"text\"\n          name=\"imdbId\"\n          placeholder=\"enter IMDb ID*\"\n          className={classNames(\n            'form__input',\n            { 'form__input--error': errors.imdbId },\n          )}\n          value={values.imdbId}\n          onChange={this.getChanges}\n        />\n\n        <button\n          type=\"submit\"\n          className=\"form__button\"\n          disabled={infoAboutErrors}\n        >\n          ⩥ Add ⩤\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  getMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: [\n        ...state.movies,\n        movie,\n      ],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie getMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}